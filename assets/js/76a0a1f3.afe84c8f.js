"use strict";(self.webpackChunkreact_component_shell_website=self.webpackChunkreact_component_shell_website||[]).push([[157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2,title:"createShellProvider()"},l=void 0,i={unversionedId:"createShellProvider",id:"createShellProvider",title:"createShellProvider()",description:"createShellProvider is a function with the help of which we can create a react-context provider and hooks for a certain shell type.",source:"@site/docs/createShellProvider.md",sourceDirName:".",slug:"/createShellProvider",permalink:"/docs/createShellProvider",draft:!1,editUrl:"https://github.com/Ruben-Arushanyan/react-component-shell/edit/master/website/docs/createShellProvider.md",tags:[],version:"current",lastUpdatedBy:"Ruben Arushanyan",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"createShellProvider()"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Shell",permalink:"/docs/shell"}},s={},p=[{value:"Import",id:"import",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Syntax",id:"syntax",level:2},{value:"<code>createShellProvider(options?)</code>",id:"createshellprovideroptions",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"createShellProvider")," is a function with the help of which we can create a react-context provider and hooks for a certain shell type."),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { createShellProvider } from 'react-component-shell'\n")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"Let's create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," class, which stores the count ",(0,a.kt)("strong",{parentName:"p"},"state")," and has an ",(0,a.kt)("inlineCode",{parentName:"p"},"increment()")," method to add the count by one. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," class inherits from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Shell")," class, which provides additional methods for ",(0,a.kt)("strong",{parentName:"p"},"state management"),". For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateState()")," method, with the help of which we update the ",(0,a.kt)("strong",{parentName:"p"},"state")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Count")," class. For more details about the ",(0,a.kt)("inlineCode",{parentName:"p"},"Shell")," base class, please see them ",(0,a.kt)("a",{parentName:"p",href:"/docs/shell"},"here")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Count.js"',title:'"Count.js"'},"import { Shell } from 'react-component-shell'\n\nclass Count extends Shell {\n    state = {count: 0}\n\n    increment() {\n        this.updateState(state => {\n            return {count: state.count + 1}\n        })\n    }\n}\n\nexport {Count}\n")),(0,a.kt)("p",null,"Now let's use the ",(0,a.kt)("inlineCode",{parentName:"p"},"createShellProvider()")," function to create a react-context provider and access hooks for the Count shell."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="count-context.js"',title:'"count-context.js"'},"import { createShellProvider } from 'react-component-shell'\nimport { Count } from './Count.js'\n\nconst [\n    CountProvider,\n    useCount,\n    useCountState,\n] = createShellProvider({ shellClass: Count })\n\nexport {CountProvider, useCount, useCountState}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"createShellProvider()")," function returns an array with three values. The first value is a provider component, the second value is a react hook that returns a shell object, and the last value is a react hook that return a state value by a selector."),(0,a.kt)("p",null,"In our example, we created the ",(0,a.kt)("inlineCode",{parentName:"p"},"CountProvider")," provider and ",(0,a.kt)("inlineCode",{parentName:"p"},"useCount"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useCountState")," hooks."),(0,a.kt)("p",null,"Now let's use them in react app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js"',title:'"App.js"'},"import {CountProvider, useCount, useCountState} from './count-context.js'\n\nconst App = (props) => {\n    return (\n        <CountProvider>\n            <CurrentCount />\n            <IncrementButton />\n        </CountProvider>\n    )\n}\n\nconst CurrentCount = () => {\n    const count = useCountState(state => state.count)\n\n    return <div>{count}</div>\n}\n\nconst IncrementButton = (props) => {\n    const countShell = useCount()\n\n    const increment = () => {\n        countShell.increment()\n    }\n\n    return <button onClick={increment}>Increment</button>\n}\n\nexport default App\n")),(0,a.kt)("p",null,"In the example above, we can apply the ",(0,a.kt)("inlineCode",{parentName:"p"},"useCount()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"useCountState()")," hooks to any component inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"<CountProvider>"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useCount()")," returns a game object, and we can call its method ",(0,a.kt)("inlineCode",{parentName:"p"},"increment()")," or read and write its properties."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useCountState(selector)")," returns the value of the state of the countShell, which is indicated by the ",(0,a.kt)("strong",{parentName:"p"},"selector")," function, and every time the change of the specified value in the state will result in the re-rendering of the given component."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("h3",{id:"createshellprovideroptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"createShellProvider(options?)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"options")," ? ",(0,a.kt)("inlineCode",{parentName:"p"},"<Object>")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"shellClass")," ? ",(0,a.kt)("inlineCode",{parentName:"p"},"<Class>"),(0,a.kt)("br",{parentName:"p"}),"\n","Any JavaScript class that inherits from the ",(0,a.kt)("a",{parentName:"p",href:"/docs/shell"},"Shell")," class."),(0,a.kt)("p",{parentName:"li"},"Example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Shell, createShellProvider } from 'react-component-shell'\n\nclass Count extends Shell {\n    state = {count: 0}\n}\n\nconst [CountProvider, useCount, useCountState] = createShellProvider({\n    // highlight-next-line\n    shellClass: Count\n})\n")),(0,a.kt)("p",{parentName:"li"},"Default: "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class DEFAULT_SHELL extends Shell {}\n")),(0,a.kt)("br",null)),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"customProviderWrapper")," ? ",(0,a.kt)("inlineCode",{parentName:"p"},"<ReactComponent>"),(0,a.kt)("br",{parentName:"p"}),"\n","Any react component that overrides the shell provider component, and with the use of that, we can customize the shell provider component to our requirements."),(0,a.kt)("p",{parentName:"li"},"Example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Shell, createShellProvider } from 'react-component-shell'\n\nclass Count extends Shell {\n    state = {count: 0}\n}\nconst CustomProvider = (props) => {\n    const {children, shell} = props\n    return (\n        <div>\n            <h1>Hello</h1>\n            {children}\n        </div>\n    )\n}\n\nconst [CountProvider, useCount, useCountState] = createShellProvider({ \n    shellClass: Count,\n    // highlight-next-line\n    customProviderWrapper: CustomProvider\n})\n")),(0,a.kt)("p",{parentName:"li"},"Default: "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const DEFAULT_PROVIDER_WRAPPER = (props) => {\n    const {children, shell} = props\n    return children\n}\n")),(0,a.kt)("p",{parentName:"li"},"For more details about the ",(0,a.kt)("strong",{parentName:"p"},"customProviderWrapper"),", please see them ",(0,a.kt)("a",{parentName:"p",href:"/docs/customProviderWrapper"},"here")))))))}u.isMDXComponent=!0}}]);