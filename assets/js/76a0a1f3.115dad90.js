"use strict";(self.webpackChunkreact_component_shell_website=self.webpackChunkreact_component_shell_website||[]).push([[157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,c(c({ref:t},u),{},{components:n})):r.createElement(h,c({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:3},c=void 0,l={unversionedId:"createShellProvider",id:"createShellProvider",title:"createShellProvider",description:"createShellProvider is a function with the help of which we can create a react-context provider and hooks for a certain shell type.",source:"@site/docs/createShellProvider.md",sourceDirName:".",slug:"/createShellProvider",permalink:"/docs/createShellProvider",draft:!1,editUrl:"https://github.com/Ruben-Arushanyan/react-component-shell/edit/master/website/docs/createShellProvider.md",tags:[],version:"current",lastUpdatedBy:"Ruben Arushanyan",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Shell",permalink:"/docs/shell"}},i={},s=[{value:"Import",id:"import",level:2},{value:"Basic Usage",id:"basic-usage",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"createShellProvider")," is a function with the help of which we can create a react-context provider and hooks for a certain shell type."),(0,o.kt)("h2",{id:"import"},"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createShellProvider } from 'react-component-shell'\n")),(0,o.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,o.kt)("p",null,"Let's create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Count")," class, which stores the count state and has an ",(0,o.kt)("inlineCode",{parentName:"p"},"increment()")," method to add the count by one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Count.js"',title:'"Count.js"'},"import { Shell } from 'react-component-shell'\n\nclass Count extends Shell {\n    state = {count: 0}\n\n    increment() {\n        this.updateState(state => {\n            return {count: state.count + 1}\n        })\n    }\n}\n\nexport {Count}\n")),(0,o.kt)("p",null,"Now let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"createShellProvider")," function to create a react-context provider and hooks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="count-context.js"',title:'"count-context.js"'},"import { createShellProvider } from 'react-component-shell'\nimport { Count } from './Count.js'\n\nconst [\n    CountProvider,\n    useCount,\n    useCountState,\n] = createShellProvider({ shellClass: Count })\n\nexport {CountProvider, useCount, useCountState}\n")),(0,o.kt)("p",null,"Now let's use in react component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js"',title:'"App.js"'},"import {CountProvider, useCount, useCountState} from './count-context.js'\n\nconst App = (props) => {\n    return (\n        <CountProvider>\n            <CurrentCount />\n            <IncrementButton />\n        </CountProvider>\n    )\n}\n\nconst CurrentCount = () => {\n    const count = useCountState(state => state.count)\n\n    return <div>{count}</div>\n}\n\nconst IncrementButton = (props) => {\n    const countShell = useCount()\n\n    const increment = () => {\n        countShell.increment()\n    }\n\n    return <button onClick={increment}>Increment</button>\n}\n\nexport default App\n")))}p.isMDXComponent=!0}}]);