"use strict";(self.webpackChunkreact_component_shell_website=self.webpackChunkreact_component_shell_website||[]).push([[505],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6261:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:5,title:"customProviderWrapper"},i=void 0,l={unversionedId:"customProviderWrapper",id:"customProviderWrapper",title:"customProviderWrapper",description:"Every time when we create a context provider using createShellProvider() function. Its default creates a component wrapper that just returns the children's components.",source:"@site/docs/customProviderWrapper.md",sourceDirName:".",slug:"/customProviderWrapper",permalink:"/docs/customProviderWrapper",draft:!1,editUrl:"https://github.com/Ruben-Arushanyan/react-component-shell/edit/master/website/docs/customProviderWrapper.md",tags:[],version:"current",lastUpdatedBy:"Ruben Arushanyan",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"customProviderWrapper"},sidebar:"tutorialSidebar",previous:{title:"shell property",permalink:"/docs/shell-prop"}},p={},s=[{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Every time when we create a context provider using ",(0,o.kt)("inlineCode",{parentName:"p"},"createShellProvider()")," function. Its default creates a component wrapper that just returns the children's components."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const DEFAULT_PROVIDER_WRAPPER = (props) => {\n    const {children, shell} = props\n    return children\n}\n")),(0,o.kt)("p",null,"In most cases, this is what we want, but we may want to define our custom wrapper according to our requirements. To do this, we need to use the ",(0,o.kt)("strong",{parentName:"p"},"customProviderWrapper")," option when creating a provider."),(0,o.kt)("h2",{id:"syntax"},"Syntax"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createShellProvider({ customProviderWrapper: CustomProvider })")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"customProviderWrapper")," ? ",(0,o.kt)("inlineCode",{parentName:"li"},"<ReactComponent>"),(0,o.kt)("br",{parentName:"li"}),"Any react component that overrides the shell provider component, and with the use of that, we can customize the shell provider component to our requirements.")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Shell, createShellProvider } from 'react-component-shell'\n\nclass Count extends Shell {\n    state = {count: 0}\n}\n\n// highlight-start\nconst CustomProvider = (props) => {\n    const {children, shell} = props\n    return (\n        <div>\n            <h1>Hello</h1>\n            {children}\n        </div>\n    )\n}\n// highlight-end\n\nconst [CountProvider, useCount, useCountState] = createShellProvider({ \n    shellClass: Count,\n    // highlight-next-line\n    customProviderWrapper: CustomProvider\n})\n")))}u.isMDXComponent=!0}}]);